import json
from datetime import datetime

# –®–ª—è—Ö–∏ –¥–æ –ª–æ–≥—ñ–≤
polygon_log = "logs/polygon_balance.log"
galxe_log = "logs/galxe_farm.log"
youtube_log = "logs/youtube_farm.log"

def read_last_balance(log_path):
    try:
        with open(log_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
            for line in reversed(lines):
                if "–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å:" in line:
                    return float(line.split(":")[1].strip().split()[0])
    except:
        return 0.0
    return 0.0

def read_last_profit(log_path):
    try:
        with open(log_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
            for line in reversed(lines):
                if "–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ –∑–∞ –∑–≤—ñ—Ç:" in line:
                    return float(line.split(":")[1].strip().split()[0])
    except:
        return 0.0
    return 0.0

polygon_balance = read_last_balance(polygon_log)
galxe_profit = read_last_profit(galxe_log)
youtube_profit = read_last_profit(youtube_log)

total_profit = polygon_balance + galxe_profit + youtube_profit

# –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
report = f"""===== –ê–≤—Ç–æ–ó–≤—ñ—Ç –∑–∞ {datetime.now().strftime("%Y-%m-%d %H:%M:%S")} =====
‚Üí [Galxe] –ü—Ä–∏–±—É—Ç–æ–∫: {galxe_profit:.2f} USDT
‚Üí [YouTube] –ü—Ä–∏–±—É—Ç–æ–∫: {youtube_profit:.2f} USDT
‚Üí [Polygon] –ë–∞–ª–∞–Ω—Å: {polygon_balance:.2f} MATIC

üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {total_profit:.2f} USDT (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –±–∞–ª–∞–Ω—Å—É)
====================================================
"""

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
with open("logs/auto_profit_report.log", "a", encoding="utf-8") as f:
    f.write(report + "\n")

# –í–∏–≤—ñ–¥
print(report)
